---
title: "Ocular ray tracing simulations"
filters:
  - shinylive
---

This is a demonstration of [visisipy](https://visisipy.readthedocs.io), our Python library for vision simulations.

[Check the code](https://github.com/MREYE-LUMC/visisipy){.btn .btn-outline-primary .btn role="button"}

::: {.callout-note}
Loading may take a while due to the installation of visisipy's dependencies.
:::

:::{.column-screen-inset}
```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
## file: app.py
import visisipy
import matplotlib.pyplot as plt
from shiny import reactive, ui as cui
from shiny.express import input, render, ui
import seaborn as sns

visisipy.set_backend("optiland")

default_geometry = visisipy.NavarroGeometry()

_initial_fields = {0, 30, 60}
fields = reactive.value(_initial_fields)

with ui.sidebar():
    with ui.accordion(id="eye_model"):
        with ui.accordion_panel("Fields"):
            with ui.card():
                ui.input_numeric("field_angle", "Field angle [°]", 0, min=0, max=90)
                ui.input_action_button("add_field", "Add field")

            ui.input_selectize(
                "current_fields",
                "Current fields",
                {str(i): f"{i} °" for i in _initial_fields},
                selected=list(map(str, _initial_fields)),
                multiple=True,
            )

            ui.input_action_button("clear_fields", "Clear all fields")

        with ui.accordion_panel("Biometry"):
            ui.input_numeric(
                "axial_length",
                "Axial length [mm]",
                round(default_geometry.axial_length, 3),
                min=0,
            )
            ui.input_numeric(
                "cornea_thickness",
                "Cornea thickness [mm]",
                default_geometry.cornea_thickness,
                min=0,
            )
            ui.input_numeric(
                "anterior_chamber_depth",
                "Anterior chamber depth [mm]",
                default_geometry.anterior_chamber_depth,
                min=0,
            )
            ui.input_numeric(
                "lens_thickness",
                "Lens thickness [mm]",
                default_geometry.lens_thickness,
                min=0,
            )

        with ui.accordion_panel("Cornea front"):
            ui.input_numeric(
                "cornea_front_radius",
                "Radius [mm]",
                default_geometry.cornea_front.radius,
                min=0,
            )
            ui.input_numeric(
                "cornea_front_asphericity",
                "Asphericity [-]",
                default_geometry.cornea_front.asphericity,
            )

        with ui.accordion_panel("Cornea back"):
            ui.input_numeric(
                "cornea_back_radius",
                "Radius [mm]",
                default_geometry.cornea_back.radius,
                min=0,
            )
            ui.input_numeric(
                "cornea_back_asphericity",
                "Asphericity [-]",
                default_geometry.cornea_back.asphericity,
            )

        with ui.accordion_panel("Lens front"):
            ui.input_numeric(
                "lens_front_radius",
                "Radius [mm]",
                default_geometry.lens_front.radius,
                min=0,
            )
            ui.input_numeric(
                "lens_front_asphericity",
                "Asphericity [-]",
                default_geometry.lens_front.asphericity,
            )

        with ui.accordion_panel("Lens back"):
            ui.input_numeric(
                "lens_back_radius",
                "Radius [mm]",
                default_geometry.lens_back.radius,
                max=0,
            )
            ui.input_numeric(
                "lens_back_asphericity",
                "Asphericity [-]",
                default_geometry.lens_back.asphericity,
            )


def update_current_fields_selectize(fields):
    ui.update_selectize(
        id="current_fields",
        choices={str(i): f"{i} °" for i in fields},
        selected=[str(i) for i in fields],
    )


@reactive.effect
@reactive.event(input.add_field, ignore_none=True)
def add_field():
    """Add a field to the system."""
    new_field = input.field_angle()

    if new_field is not None:
        fields.set(fields() | {new_field})

        # Update selectize
        update_current_fields_selectize(fields())


@reactive.effect
@reactive.event(input.current_fields)
def remove_field():
    """Remove a field from the system by removing it from the current_fields selectize."""
    current_fields = set(int(f) for f in input.current_fields())

    if current_fields != fields():
        fields.set(set(sorted(current_fields)))
        update_current_fields_selectize(current_fields)


@reactive.effect
@reactive.event(input.clear_fields, ignore_none=True)
def clear_fields():
    """Clear all fields except for the central field."""
    fields.set({0})
    update_current_fields_selectize({0})


def build_model():
    geometry = visisipy.create_geometry(
        axial_length=input.axial_length(),
        cornea_front_radius=input.cornea_front_radius(),
        cornea_front_asphericity=input.cornea_front_asphericity(),
        cornea_back_radius=input.cornea_back_radius(),
        cornea_back_asphericity=input.cornea_back_asphericity(),
        cornea_thickness=input.cornea_thickness(),
        anterior_chamber_depth=input.anterior_chamber_depth(),
        lens_front_radius=input.lens_front_radius(),
        lens_front_asphericity=input.lens_front_asphericity(),
        lens_back_radius=input.lens_back_radius(),
        lens_back_asphericity=input.lens_back_asphericity(),
        lens_thickness=input.lens_thickness(),
        pupil_radius=1,
    )
    model = visisipy.EyeModel(geometry)
    model.build()

    return model


@render.plot
def raytrace():
    # Depend on fields
    fields()

    model = build_model()

    y_coords = fields.get()
    coordinates = [(0, y) for y in y_coords]
    chiefs = visisipy.analysis.raytrace(coordinates=coordinates)
    marginals_top = visisipy.analysis.raytrace(coordinates=coordinates, pupil=(0, 1))
    marginals_bottom = visisipy.analysis.raytrace(
        coordinates=coordinates, pupil=(0, -1)
    )

    chiefs.z -= model.geometry.cornea_thickness + model.geometry.anterior_chamber_depth

    fig, ax = plt.subplots()
    visisipy.plots.plot_eye(ax, model.geometry, lens_edge_thickness=0.5)
    ax.set_xlim((-7, 23))
    ax.set_ylim((-15, 15))
    ax.set_aspect("equal")

    sns.lineplot(chiefs, x="z", y="y", hue="field", ax=ax, legend=False)
    ax.set_title(f"Raytrace result")

    return fig

## file: requirements.txt
https://haasj.es/wheels/numba-0.61.2-py3-none-any.whl
https://haasj.es/wheels/vtk-9.4.2-py3-none-any.whl
https://haasj.es/wheels/visisipy-0.0.1.post18+gb146992-py3-none-any.whl

numpy
scipy
pandas
pyyaml
matplotlib
tabulate
requests
seaborn
```
:::
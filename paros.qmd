---
title: Calculate the central magnification of an eye - camera system
filters:
  - shinylive
---

This integration demonstrates how PAROS can be used to calculate the central magnification of a fundus image. More information can be found at our [GitHub repository](https://github.com/MREYE-LUMC/PAROS).

[Check the code](https://github.com/MREYE-LUMC/PAROS){.btn .btn-outline-primary .btn role="button"}
[Read the paper](https://doi.org/10.1167/iovs.65.1.43){.btn .btn-outline-primary .btn role="button"}

::: {.callout-warning}
THIS EXAMPLE IS NOT INTENDED FOR MEDICAL USE AND DOES NOT ALLOW TO CHANGE CAMERA-RELATED PARAMETERS.
:::

:::{.column-screen-inset}
```{shinylive-python}
#| standalone: true
#| viewerHeight: 800
## file: app.py
from shiny.express import input, render, ui
from dataclasses import dataclass
from pandas import Series, DataFrame

def import_paros():
    """Hack needed because importing sympy (via paros) breaks printing"""
    from PAROS.fundscale import Eye, Camera, PhakicIOL, calculate_magnification
    return Eye, Camera, PhakicIOL, calculate_magnification


ui.panel_title("Calculate the central magnification of an eye - camera system")
ui.markdown(
    "This integration demonstrates how PAROS can be used to calculate the central magnification of a fundus image. More information can be found at our [GitHub repository](https://github.com/MREYE-LUMC/PAROS)."
)

with ui.card():
    ui.card_header("âš  Warning")
    ui.markdown(
        "**THIS EXAMPLE IS NOT INTENDED FOR MEDICAL USE AND DOES NOT ALLOW TO CHANGE CAMERA-RELATED PARAMETERS.**"
    )

with ui.card():
    ui.card_header("Eye model parameters")
    ui.input_select(
        "model_type",
        "Model type",
        ("Phakic", "Pseudophakic", "pIOL"),
        selected="Phakic",
    )

    with ui.layout_columns():
        ui.input_numeric("r_corf", "Anterior corneal curvature (mm)", 7.72, min=0)
        ui.input_numeric("r_corb", "Posterior corneal curvature (mm)", 6.50, min=0)
        ui.input_numeric("r_lensf", "Anterior lens curvature (mm)", 10.2, min=0)
        ui.input_numeric("r_lensb", "Posterior lens curvature (mm)", 6.0, min=0)
        ui.input_numeric("d_cor", "Corneal thickness (mm)", 0.55, min=0)
        ui.input_numeric("d_acd", "Anterior chamber depth (mm)", 3.05, min=0)
        ui.input_numeric("d_lens", "Crystalline lens thickness (mm)", 4, min=0)
        ui.input_numeric("d_vitr", "Vitreous chamber depth (mm)", 16.3203, min=0)
        ui.input_numeric(
            "se", "Spherical eq. of refraction (D)", 0, min=-10, max=10, step=0.5
        )

    with ui.panel_conditional("input.model_type == 'pIOL'"):
        ui.input_numeric("piol_power", "pIOL power", 9)


def phakic_eye(Eye):
    phakic_geometry = {
        "R_corF": input.r_corf() * -(10**-3),
        "R_corB": input.r_corb() * -(10**-3),
        "R_lensF": input.r_lensf() * -(10**-3),
        "R_lensB": input.r_lensb() * 10**-3,
        "D_cor": input.d_cor() * 10**-3,
        "D_ACD": input.d_acd() * 10**-3,
        "D_lens": input.d_lens() * 10**-3,
        "D_vitr": input.d_vitr() * 10**-3,
        "SE": input.se(),
    }

    # Define a phakic eye model
    return Eye(
        name="phakic",
        geometry=phakic_geometry,
        NType="Navarro",
        refraction=phakic_geometry["SE"],
    )


def pseudophakic_eye(Eye):
    pseudophakic_geometry = {
        "R_corF": input.r_corf() * -(10**-3),
        "R_corB": input.r_corb() * -(10**-3),
        "R_lensF": input.r_lensf() * -(10**-3),
        "R_lensB": input.r_lensb() * 10**-3,
        "D_cor": input.d_cor() * 10**-3,
        "D_ACD": input.d_acd() * 10**-3,
        "D_lens": input.d_lens() * 10**-3,
        "D_vitr": input.d_vitr() * 10**-3,
        "SE": input.se(),
    }

    return Eye(
        name="IOL",
        geometry=pseudophakic_geometry,
        model_type="VughtIOL",
        NType="VughtIOL",
        refraction=pseudophakic_geometry["SE"],
    )


def piol_eye(Eye, PhakicIOL):
    piol_geometry = {
        "R_corF": input.r_corf() * -(10**-3),
        "R_corB": input.r_corb() * -(10**-3),
        "R_lensF": input.r_lensf() * -(10**-3),
        "R_lensB": input.r_lensb() * 10**-3,
        "D_cor": input.d_cor() * 10**-3,
        "D_ACD": input.d_acd() * 10**-3,
        "D_lens": input.d_lens() * 10**-3,
        "D_vitr": input.d_vitr() * 10**-3,
        "SE": input.se(),
    }

    piol_data = PhakicIOL(
        power=input.piol_power(),
        thickness=0.2e-3,
        refractive_index=1.47,
        lens_distance=0.5e-3,
    )

    return Eye(
        name="pIOL",
        geometry=piol_geometry,
        NType="Navarro",
        refraction=piol_geometry["SE"],
        pIOL=piol_data,
    )


@render.ui()
def calculate():
    Eye, Camera, PhakicIOL, calculate_magnification = import_paros()
    if input.model_type() == "Phakic":
        eye = phakic_eye(Eye)
    elif input.model_type() == "Pseudophakic":
        eye = pseudophakic_eye(Eye)
    elif input.model_type() == "pIOL":
        eye = piol_eye(Eye, PhakicIOL)
    else:
        raise ValueError(f"{input.model_type()} is not supported")

    camera_f_cond = 0.026347
    camera_a1 = -0.010541

    camera = Camera(F_cond=camera_f_cond, a1=camera_a1)

    lens_back_curvature, glasses_curvature = eye.adjust_lens_back(
        eye.geometry["SE"], update_model=True
    )
    magnification, glasses_power, _ = calculate_magnification(eye, camera)

    return ui.markdown(
        f"| Parameter                             | Value                    |\n"
        f"| ------------------------------------- | ------------------------ |\n"
        f"| Magnification eye model               | {abs(magnification):.2f} |\n"
        f"| Necessary correction at camera phakic | {glasses_power:.2f} |\n"
    )

## file: requirements.txt
paros
sympy
```
:::
---
title: "Ocular ray tracing simulations"
filters:
  - shinylive
---

This is a demonstration of [visisipy](https://visisipy.readthedocs.io), our Python library for vision simulations.

[Check the code](https://github.com/MREYE-LUMC/visisipy){.btn .btn-outline-primary .btn role="button"}

::: {.callout-note}
Loading may take a while due to the installation of visisipy's dependencies.
:::

:::{.column-screen-inset}
```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
## file: app.py
import visisipy
import matplotlib.pyplot as plt
from shiny.express import input, render, ui
import seaborn as sns

visisipy.set_backend("optiland")

model = visisipy.EyeModel()

def build_model(model):
    model.build()

build_model(model)

ui.input_slider("n", "Ray angle", 0, 85, 1)


@render.plot
def raytrace():
    y_coords = range(0, input.n(), 1)
    raytrace = visisipy.analysis.raytrace(coordinates=[(0, y) for y in y_coords])
    raytrace.z -= (model.geometry.cornea_thickness + model.geometry.anterior_chamber_depth)
    
    fig, ax = plt.subplots()
    visisipy.plots.plot_eye(ax, model.geometry, lens_edge_thickness=0.5)
    ax.set_xlim((-7, 23))
    ax.set_ylim((-15, 15))
    ax.set_aspect("equal")
    
    sns.lineplot(raytrace, x="z", y="y", hue="field", ax=ax, legend=False)
    ax.set_title(f"Raytrace 0 - {input.n()} degrees")

    return fig

## file: requirements.txt
https://haasj.es/wheels/numba-0.61.2-py3-none-any.whl
https://haasj.es/wheels/vtk-9.4.2-py3-none-any.whl
https://haasj.es/wheels/visisipy-0.0.1.post18+gb146992-py3-none-any.whl

numpy
scipy
pandas
pyyaml
matplotlib
tabulate
requests
seaborn
```
:::